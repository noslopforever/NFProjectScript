class ContentObject {
    constructor(InParentContentObject) {
        // add this to parent's children
        this.parent = InParentContentObject;
        if (InParentContentObject) {
            InParentContentObject.children.push(this);
        }

        // dataBindings registered to this object.
        this.dataBindings = [];

        // content child of this ContentObject.
        this.children = [];

    }

    destroy() {
        // destroy all data-bindings
        for (let i = 0; i < this.dataBindings.length; i++) {
            let db = this.dataBindings[i];
            db.destroy();
        }
        // unref data-bindings
        this.dataBindings = [];

        // recursive children's destroy
        for (let i = 0; i < this.children.length; i++) {
            let c = this.children[i];
            c.destroy();
        }
        // unref children
        this.children = [];

        // mark this CO has already been destroyed.
        this.destroyed = true;

    }

    createElements() {
        return null;
    }

    // Mark this CO's content is dirty, which means HTML-elements generated by this CO should be updated.
    markDirty() {
        // TODO
    }

}



//
// User-Control Library
//

/// Panel Control
class Panel extends ContentObject {

    constructor(InParent) {
        super(InParent);
    }

    createElements() {
        this._gscoElement = document.createElement("div");
        this._gscoElement._gscoContentObject = this;

        this._gscoElement.setAttribute("class", "copanel");
        {
            // TODO bind children to root's children ('call appendChild').
            for (let i = 0; i < this.children.length; i++) {
                const child = this.children[i];
                let childEl = child.createElements();
                this._gscoElement.appendChild(childEl);
            }
        }
        return this._gscoElement;
    }

}


/// Label Control
class Label extends ContentObject {
    constructor(InParent) {
        super(InParent);
        this._Text = "Default Label Text";
    }

    createElements() {
        this._gscoElement = document.createElement("div");
        this._gscoElement._gscoContentObject = this;

        this._gscoElement.setAttribute("class", "colabel");
        {
            // TODO bind Text to textNode's nodeValue.
            this.textNode = document.createTextNode(this.Text);
            this._gscoElement.appendChild(this.textNode);
        }
        return this._gscoElement;
    }

    get Text() {
        return this._Text;
    }

    set Text(v) {
        this._Text = v;
        if (this.textNode) {
            this.textNode.nodeValue = v;
        }
    }

}

///// Button Control
//class Button extends ContentObject {
//    constructor(InParent) {
//        super(InParent, [
//                "<div class=\"cobutton\" id=\"{Name}\">",
//                "    {Text}",
//                "</div>",
//            ]);
//
//        // TODO Select from Text and children.
//    }
//
//}


// nps Editor conception.
class Editor {
    constructor() {

        // Model of the editor
        this.Model = null;

        // UI root of the editor
        this.UIRoot = new Panel(null);

    }

}