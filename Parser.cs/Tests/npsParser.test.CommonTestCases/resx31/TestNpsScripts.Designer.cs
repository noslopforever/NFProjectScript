//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace nf.protoscript.test {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class TestNpsScripts {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal TestNpsScripts() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("npsParser.test.CommonTestCases.70.resx70.TestNpsScripts", typeof(TestNpsScripts).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to value IntColor
        ///	-R = 0
        ///	-G = 0
        ///	-B = 0
        ///
        ///model TestObj
        ///	-IntColor Color @setter
        ///
        ///model Test
        ///	+TestMethod(InParam0:TestObj)
        ///		&gt; InParam0.Color.R = 100
        ///.
        /// </summary>
        public static string AdvExprs {
            get {
                return ResourceManager.GetString("AdvExprs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to massunit bullet
        ///	@placement=2d
        ///	@movemen=simulate
        ///	-speed = 128
        ///
        ///unit ship
        ///	@placement=2d
        ///	@movement=kinetic
        ///	@controllable
        ///	@battleunit
        ///		-HP
        ///	+controller = kinetic2d
        ///	+fire
        ///		&gt; spawn(bullet, dir)
        ///	+hurt(hp)
        ///		&gt; HP -= hp 
        ///	[] explode
        ///		&gt; self.inactivate()
        ///		&gt; play &apos;explode&apos;
        ///			&gt; end: destory(self)
        ///
        ///unit asteroid
        ///	@placement=2d
        ///	@movement=simulate
        ///	@Hit=bullet, ship
        ///	-speed=32
        ///	+OnHit(Other)
        ///		&gt; this.explode()
        ///	[] explode
        ///		&gt; self.inactivate()
        ///		&gt; play &apos;explode&apos;
        ///			&gt; end: dest [rest of string was truncated]&quot;;.
        /// </summary>
        public static string Asteroid {
            get {
                return ResourceManager.GetString("Asteroid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        public static string BasicExprs {
            get {
                return ResourceManager.GetString("BasicExprs", resourceCulture);
            }
        }
     
        /// <summary>
        ///   Looks up a localized string similar to map chess
        ///	@tile
        ///		-state = EState.Null
        ///
        ///	+set(tile, tagState)
        ///		&gt; tile.state = tagState
        ///
        ///player chessplayer
        ///	- state
        ///
        ///# player A and B will be automatically registered to a game session.
        ///
        ///chessplayer $playerA
        ///	- state = EState.Circle
        ///chessplayer $playerB
        ///	- state = EState.Cross
        ///
        ///	
        ///rule
        ///	@turnbased
        ///	[] OnTurn(player)
        ///		&lt;&gt; on&lt;player.hit&gt;(tile)
        ///			# event in a graph will be automatically detached when the graph ends.
        ///			&gt; if (tile.state != EState.Null)
        ///				&gt; error &quot;must hit empty tiles [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OXChess {
            get {
                return ResourceManager.GetString("OXChess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to unit ball
        ///    @placement=2d
        ///    @move=simulate
        ///    @hit=[plate, brick]
        ///    &gt;&gt; OnHit(Other)
        ///        &gt; vel -= Other.vel
        ///        &gt; vel.swapY()
        ///
        ///unit plate
        ///    @placement=2d
        ///    @move=simulate
        ///    @controllable
        ///    +move
        ///        -n dir @range=[-1, 1]
        ///        &gt; vel = dir * speed
        ///
        ///unit brick
        ///    @placement=2d
        ///
        ///world gameworld
        ///    &gt;&gt; OnHit(Ball:ball, Other)
        ///        &gt; Other&lt;brick&gt;.destroy()
        ///.
        /// </summary>
        public static string PingPong {
            get {
                return ResourceManager.GetString("PingPong", resourceCulture);
            }
        }
    }
}
